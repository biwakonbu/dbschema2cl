#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(defpackage :ros.script.dbschema2lisp.lisp.3685167702
  (:use :cl))
(in-package :ros.script.dbschema2lisp.lisp.3685167702)

#| Token Object string for display terminal
|#
(ql:quickload :cl-ppcre)

(defvar *token-create-object* "<CREATE TOKEN>")
(defvar *token-table-object* "<TABLE TOKEN>")
(defvar *token-blank-object* "<BLANK TOKEN>")
(defvar *token-create-table-object*
  (concatenate 'string *token-create-object* *token-table-object*))

(defvar *token-create-table* "CREATE TABLE")
(defvar *token-semicolon* ";")
(defvar *token-blank* " ")

(defparameter *interrupt-line* nil)
(defparameter *sql-read-line-string-buffer* "")

(defun query-in-create-table-token-p (s)
  (if (search *token-create-table* s)
      t
      nil))

(defun query-interrupt-line-p ()
  (if *interrupt-line*
      t
      nil))

(defun blank-string-buffer-p ()
  (equal "" *sql-read-line-string-buffer*))
(defun blank-read-line-p (s)
  (equal "" s))

(defun query-end-line-p (s)
  (if (search *token-semicolon* s)
      t
      nil))

(defun initialize-string-buffer ()
  (defparameter *sql-read-line-string-buffer* ""))

(defun interrupt-line-on ()
  (defparameter *interrupt-line* t))
(defun interrupt-line-off ()
  (defparameter *interrupt-line* nil))

(defun concatenate-query (s)
  (defparameter *sql-read-line-string-buffer*
    (concatenate 'string *sql-read-line-string-buffer* s)))

(defun query-parser ()
  (if (not (blank-string-buffer-p))
      (format t "~a~%" *sql-read-line-string-buffer*)))

(defun sql-parser (s)
  (if (or (query-in-create-table-token-p s)
          (query-interrupt-line-p))
      (progn
        ;;(format t "~a~%" (string-trim '(#\Return) s))
        (concatenate-query s)
        (interrupt-line-on)))
  (if (query-end-line-p s)
      (progn
        (query-parser)
        (initialize-string-buffer)
        (interrupt-line-off))))

(defun read-file (argv)
  (with-open-file (in (car argv) :if-does-not-exist :error)
    (when in
      (loop for line = (read-line in nil)
         while line do
           (sql-parser (string-trim '(#\Return #\Space) line))
           ;; (if (or (query-interrupt-line-p)
           ;;         (query-end-line-p line)
           ;;         (query-in-create-table-token-p line))
           ;;     (format t ""))
               ))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (handler-case (read-file argv)
    (file-error (c) (format t "~a~%" c))
    (type-error () (format t "not arguments~%"))))
;;; vim: set ft=lisp lisp:

