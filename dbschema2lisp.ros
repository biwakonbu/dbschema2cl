#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(defpackage :ros.script.dbschema2lisp.lisp.3685167702
  (:use :cl))
(in-package :ros.script.dbschema2lisp.lisp.3685167702)

#| Token Object string for display terminal
|#
(defvar *token-create-object* "<CREATE TOKEN>")
(defvar *token-table-object* "<TABLE TOKEN>")
(defvar *token-create-table-object*
  (concatenate 'string *token-create-object* *token-table-object*))

(defvar *token-create-table* "CREATE TABLE")
(defvar *token-semicolon* ";")


(defparameter *interrupte-line* nil)
(defparameter *sql-read-line-string-buffer* "")

(defun query-in-create-table-token-p (s)
  (if (search *token-create-table* s)
      t
      nil))

(defun query-interrupte-line-p ()
  (if *interrupte-line*
      t
      nil))

(defun query-end-line-p (s)
  (if (search *token-semicolon* s)
      t
      nil))

(defun initialize-string-buffer ()
  (defparameter *sql-read-line-string-buffer* ""))

(defun interrupt-line-on ()
  (defparameter *interrupte-line* t))
(defun interrupt-line-off ()
  (defparameter *interrupte-line* nil))

(defun concatenate-query (s)
  (defparameter *sql-read-line-string-buffer*
    (concatenate 'string s *sql-read-line-string-buffer*)))

(defun sql-parser (s)
  (if (query-in-create-table-token-p s)
      (progn
        (concatenate-query s)
        (interrupt-line-on)))
  (if (query-end-line-p s)
      (progn
        (initialize-string-buffer)
        (interrupt-line-off))))

(defun read-file (argv)
  (with-open-file (in (car argv) :if-does-not-exist :error)
    (when in
      (loop for line = (read-line in nil)
         while line do
           (sql-parser line)
           (if (or (query-interrupte-line-p)
                   (query-end-line-p line)
                   (query-in-create-table-token-p line))
               (format t "~a~%" line))))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (handler-case (read-file argv)
    (file-error (c) (format t "~a~%" c))
    (type-error () (format t "not arguments~%"))))
;;; vim: set ft=lisp lisp:

